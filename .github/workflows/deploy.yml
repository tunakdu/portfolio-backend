name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /home/tunakdu/web/akduhan.com/public_html

          echo "🔄 Deployment başlatılıyor..."

          # ÇAKIŞMA TESPİTİ - Başka deploy sistemi çalışıyor mu?
          echo "🔍 Çakışan deploy sistemleri kontrol ediliyor..."

          # Git process kontrolü
          GIT_PROCESSES=$(ps aux | grep -v grep | grep -c "git pull\|git fetch\|git checkout" || echo "0")
          if [ "$GIT_PROCESSES" -gt "0" ]; then
            echo "⚠️ Başka git işlemi tespit edildi, bekleniyor..."
            sleep 5
          fi

          # Lock file oluştur
          LOCK_FILE="/tmp/deploy.lock"
          if [ -f "$LOCK_FILE" ]; then
            echo "⚠️ Başka deployment çalışıyor (lock file mevcut), bekleniyor..."
            rm -f "$LOCK_FILE" # Eski lock'u temizle
          fi
          echo $ > "$LOCK_FILE"

          # Deploy indicator oluştur
          echo "$(date): GitHub Action Deploy Started" > .deploy-status

          # Supervisor worker'larını zarif bir şekilde durdur
          echo "⏸️  Supervisor worker'ları durduruluyor..."
          sudo supervisorctl stop laravel-worker:* || true
          sudo supervisorctl stop laravel-scheduler || true

          # Git pull latest changes (sadece kodu güncelle)
          echo "📥 Kod güncellemeleri alınıyor..."
          git pull origin master

          # Install/Update Composer dependencies (production optimized)
          echo "📦 Composer dependencies güncelleniyor..."
          composer install --no-dev --optimize-autoloader --no-interaction

          # Install/Update NPM dependencies and build assets
          echo "🏗️  Assets build ediliyor..."
          npm install --production
          npm run build

          # MySQL SSL dosyalarını koru/kopyala (her deploy sonrası)
          echo "🔐 SSL dosyaları kontrol ediliyor..."
          mkdir -p ssl/
          if [ ! -f ssl/ca.pem ]; then
            cp /etc/mysql/ssl/ca.pem ssl/ 2>/dev/null || echo "SSL dosyası bulunamadı: ca.pem"
          fi
          if [ ! -f ssl/server-cert.pem ]; then
            cp /etc/mysql/ssl/server-cert.pem ssl/ 2>/dev/null || echo "SSL dosyası bulunamadı: server-cert.pem"
          fi
          if [ ! -f ssl/server-key.pem ]; then
            cp /etc/mysql/ssl/server-key.pem ssl/ 2>/dev/null || echo "SSL dosyası bulunamadı: server-key.pem"
          fi

          # SSL dosya izinlerini ayarla
          if [ -d ssl/ ]; then
            chmod 644 ssl/*.pem 2>/dev/null || true
            chmod 755 ssl/
            chown -R www-data:www-data ssl/ 2>/dev/null || true
          fi

          # Laravel cache'lerini temizle (ÖNCE TEMİZLE)
          echo "🧹 Cache temizleniyor..."
          php artisan config:clear || true
          php artisan cache:clear || true
          php artisan view:clear || true
          php artisan route:clear || true
          php artisan queue:clear || true

          # Run database migrations
          echo "🗄️  Database migration'ları çalıştırılıyor..."
          php artisan migrate --force

          # KAPSAMLI DOSYA İZİNLERİ DÜZELTMESİ
          echo "📁 Kapsamlı dosya izinleri ayarlanıyor..."

          # Ana dizin sahipliği
          sudo chown -R tunakdu:www-data ./

          # Kritik dizinler için özel izinler
          sudo chmod -R 755 ./
          sudo chmod -R 775 storage/
          sudo chmod -R 775 bootstrap/cache/
          sudo chmod -R 755 database/
          sudo chmod -R 755 database/migrations/
          sudo chmod -R 755 app/
          sudo chmod -R 755 config/
          sudo chmod -R 755 routes/
          sudo chmod -R 755 resources/

          # Artisan executable olsun
          sudo chmod +x artisan

          # Log dosyaları yazılabilir olsun
          sudo chmod -R 666 storage/logs/*.log 2>/dev/null || true

          # .env dosyası güvenli ama okunabilir olsun
          sudo chmod 644 .env

          # Composer ve NPM cache dizinleri
          sudo chmod -R 755 vendor/ 2>/dev/null || true
          sudo chmod -R 755 node_modules/ 2>/dev/null || true

          echo "✅ Dosya izinleri düzeltildi"

          # Production için cache optimizasyonları (SONRA CACHE'LE)
          echo "⚡ Production cache oluşturuluyor..."
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Supervisor konfigürasyonlarını yeniden yükle
          echo "🔄 Supervisor konfigürasyonları güncelleniyor..."
          sudo supervisorctl reread
          sudo supervisorctl update

          # Queue worker'larını yeniden başlat
          echo "🚀 Supervisor worker'ları başlatılıyor..."
          sudo supervisorctl start laravel-worker:*
          sudo supervisorctl start laravel-scheduler

          # Worker durumlarını kontrol et
          echo "✅ Worker durumları kontrol ediliyor..."
          sudo supervisorctl status

          # Queue restart ile mevcut worker'ları zarif şekilde yeniden başlat
          echo "🔄 Queue worker'ları yenileniyor..."
          php artisan queue:restart

          # POST-DEPLOYMENT VALIDATION
          echo "🔍 Deployment doğrulaması yapılıyor..."

          # Kritik dosyaların varlığını kontrol et
          echo "📄 Kritik dosya kontrolleri:"
          [ -f artisan ] && echo "✅ artisan" || echo "❌ artisan eksik"
          [ -f .env ] && echo "✅ .env" || echo "❌ .env eksik"
          [ -d storage ] && echo "✅ storage/" || echo "❌ storage/ eksik"
          [ -d bootstrap/cache ] && echo "✅ bootstrap/cache/" || echo "❌ bootstrap/cache/ eksik"

          # Yazma izinleri kontrol et
          echo "🔐 Yazma izinleri kontrolleri:"
          [ -w storage ] && echo "✅ storage yazılabilir" || echo "❌ storage yazılamaz"
          [ -w bootstrap/cache ] && echo "✅ bootstrap/cache yazılabilir" || echo "❌ bootstrap/cache yazılamaz"
          [ -w database/migrations ] && echo "✅ migrations yazılabilir" || echo "❌ migrations yazılamaz"

          # Artisan komutlarını test et
          echo "⚙️ Artisan komut testleri:"
          php artisan --version > /dev/null && echo "✅ Artisan çalışıyor" || echo "❌ Artisan hatası"

          # Migration yetenekleri test et
          echo "🗄️ Migration test:"
          php artisan migrate:status > /dev/null && echo "✅ Migration sistem çalışıyor" || echo "❌ Migration sistem hatası"

          # IMAP bağlantısını test et
          echo "📧 IMAP bağlantısı test ediliyor..."
          php artisan tinker --execute="
          try {
              \$imap = new App\\Services\\ImapService();
              \$result = \$imap->testConnection();
              echo \$result['success'] ? '✅ IMAP bağlantısı başarılı' : '❌ IMAP hatası: ' . \$result['message'];
              echo \"\n\";
          } catch (Exception \$e) {
              echo '❌ IMAP test hatası: ' . \$e->getMessage() . \"\n\";
          }
          "

          # Son durum raporu
          echo ""
          echo "📊 DEPLOYMENT RAPORU:"
          echo "===================="
          echo "📧 IMAP Host: $(grep IMAP_HOST .env | cut -d '=' -f2)"
          echo "👤 IMAP User: $(grep IMAP_USERNAME .env | cut -d '=' -f2)"
          echo "🔧 Supervisor Status:"
          sudo supervisorctl status | grep laravel
          echo "===================="

          echo "🚀 Deployment başarıyla tamamlandı!"

          # Deploy tamamlandı indicator
          echo "$(date): GitHub Action Deploy Completed Successfully" > .deploy-status

          # Lock file temizle
          rm -f "/tmp/deploy.lock"