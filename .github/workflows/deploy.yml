name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Install NPM dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Create deployment package
      run: |
        # Deployment için gerekli dosyaları kopyala
        mkdir -p deployment
        
        # Laravel dosyalarını kopyala
        cp -r app deployment/
        cp -r bootstrap deployment/
        cp -r config deployment/
        cp -r database deployment/
        cp -r public deployment/
        cp -r resources deployment/
        cp -r routes deployment/
        cp -r storage deployment/
        cp -r vendor deployment/
        
        # Root dosyalarını kopyala
        cp artisan deployment/
        cp composer.json deployment/
        cp composer.lock deployment/
        
        # Build edilmiş asset'leri kopyala
        cp -r public/build deployment/public/ 2>/dev/null || true
        
        # .env.example dosyasını kopyala (production'da .env olarak kullanılacak)
        cp .env.example deployment/.env.production
        
        # Gereksiz dosyaları sil
        find deployment/ -name ".git*" -delete 2>/dev/null || true
        find deployment/ -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
        find deployment/ -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
        find deployment/ -name "*.md" -delete 2>/dev/null || true
        
        # Storage klasörü için izinleri ayarla
        chmod -R 775 deployment/storage
        chmod -R 775 deployment/bootstrap/cache
        
    - name: Deploy to server via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deployment/
        server-dir: ${{ secrets.FTP_SERVER_DIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/tests/**
          **/*.md
        
    - name: Post-deployment tasks
      if: success()
      run: |
        echo "Deployment completed successfully!"
        echo "Don't forget to:"
        echo "1. Copy .env.production to .env on the server"
        echo "2. Run 'php artisan key:generate' on the server"
        echo "3. Run 'php artisan migrate --force' on the server"
        echo "4. Run 'php artisan storage:link' on the server"
        echo "5. Set proper file permissions on the server"